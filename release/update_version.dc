# -*- mamba-deployer: fabric -*-
# Copyright (c) 2012 - 2013 Oscar Campos <oscar.campos@member.fsf.org>
# See LICENSE for more details

import imp
import datetime
import functools
from string import Template

from twisted.python import log, filepath, versions
assert versions

from fabric.tasks import Task
from fabric.api import lcd, local, abort

import settings

mamba_directory = '../../'


def check_directory(func):
    """Decorator to make us sure we are running in the correct directory
    """

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        mamba = filepath.FilePath(mamba_directory)
        mamba_git = filepath.FilePath(mamba_directory + '.git')

        if mamba.exists() and mamba.isdir():
            if mamba_git.exists() and mamba_git.isdir():
                with lcd(mamba_directory):
                    result = func(*args, **kwargs)

                return result

        abort('You must run this script in mamba/devtools/bin directory')

    return wrapper


class Steps(object):
    """Just a container to add steps in order and run them
    """

    def __init__(self):
        self.__steps = list()

    @property
    def length(self):
        """Return how many steps do we have
        """

        return len(self.__steps)

    def add(self, step):
        """Add a new step to the steps
        """

        self.__steps.append(step)

    def run(self):
        """Run all the steps in order
        """

        for step in self.__steps:
            try:
                if callable(step):
                    step()
                elif step.get('arguments') is not None:
                    step['callable'](step['arguments'])
                else:
                    step['callable']()
            except Exception as error:
                log.err(
                    'error executing step {step_number}: {error}'.format(
                        step_number=self.__steps.index(step), error=error)
                )
                raise  # propagate


class Git(object):
    """Just a convenience class for work with git
    """

    @check_directory
    def go_master_branch(self):
        """Go to master branch
        """

        result = local('git checkout master')
        if result.failed:
            abort('We can\'t checkout master: {error}'.format(
                error=result.stdout + ' ' + result.stderr)
            )

    @check_directory
    def get_current_version(self, filename):
        """Return back the current version if the given script
        """

        script = imp.load_source('script', filename)
        return script.__version__

    @check_directory
    def get_current_mamba_version(self):
        """Return back the current mamba version
        """

        mamba = imp.load_source(
            'version', mamba_directory + '/mamba/_version.py')
        return mamba.version

    @check_directory
    def git_pull(self):
        """Get the latest version of Mamba master branch
        """

        local('git pull origin master')

    @check_directory
    def git_compare_versions(self):
        """Compare the latest versions of mamba scripts
        """

        git_versions = {}
        mamba_version = self.get_current_mamba_version()

        for script in filepath.listdir(mamba_directory + './mamba/scripts'):
            if script == 'test':
                continue
            if script.endswith('.pyc') or script.endswith('.pyo'):
                continue
            if script in ['__init__.py', 'commons.py', 'mamba_admin.py']:
                continue

            log = 'git log -1 --pretty=format:"%at" {v} {script}'

            last = local(
                log.format(
                    v=mamba_version.short(),
                    script='mamba/scripts/' + script
                ),
                capture=True
            )
            current = local(
                log.format(v='', script='mamba/scripts/' + script),
                capture=True
            )

            git_versions[script] = int(last.stdout or 0) < int(current.stdout)

        return git_versions

    @check_directory
    def commit_release(self):
        """Commit the changes made to this release
        """

        git_add = 'git add docs/relnotes mamba/_version.py mamba/scripts'
        git_commit = 'git commit -m "release {version}"'.format(
            version=self.get_current_mamba_version()
        )
        if settings.pretend:
            print('PRETEND: ' + git_add)
            print('PRETEND: ' + git_commit)
        else:
            local(git_add)
            local(git_commit)

    @check_directory
    def git_create_tag(self):
        """Create a new release version tag on last git master branch commit
        """

        version = self.get_current_mamba_version().short()
        git_tag = 'git tag {version}'.format(version=version)

        if settings.pretend:
            print('PRETEND: ' + git_tag)
        else:
            result = local(git_tag)

            if result.failed:
                abort('We can\'t set tag {version}...'.format(version=version))

    @check_directory
    def git_push(self):
        """Push the new tag and commit to github and bitbucket

        WARNING: You should have write permission in the GitHub (origin)
                 and BitBucket (bitbucket) repos!!! (core developer mainly)
        """

        git_push = 'git push origin master'
        git_push_bitbucket = 'git push bitbucket master'
        git_push_tags = 'git push --tags origin'
        git_push_tags_bitbucket = 'git push --tags bitbucket'

        if settings.pretend:
            print('PRETEND: ' + git_push)
            print('PRETEND: ' + git_push_bitbucket)
            print('PRETEND: ' + git_push_tags)
            print('PRETEND: ' + git_push_tags_bitbucket)
        else:
            local(git_push)
            local(git_push_bitbucket)
            local(git_push_tags)
            local(git_push_tags_bitbucket)


class Updater(object):
    """Updater convenience class that works with the mamba files directly
    """

    def __init__(self):
        self.git = Git()

    @check_directory
    def update_script_version(self, script):
        """Update a mamba-admin script version
        """

        version = None
        l = local('grep versions.Version mamba/scripts/{script}'.format(
            script=script),
            capture=True
        )

        exec(l.stdout)
        version_string = 'versions.{repr}'.format(repr=repr(version))

        major = version.major
        minor = version.minor
        micro = version.micro
        rc = version.prerelease

        if settings.is_bugfix:
            micro += 1
        elif settings.is_minor:
            minor += 1
            micro = 0
        elif settings.is_major:
            major += 1
            minor = micro = 0

        if settings.is_release_candidate:
            if rc is None:
                rc = 1
            else:
                rc += 1

            rc = ', {rc}'.format(rc=rc)
        else:
            rc = ''

        new_version_string = (
            'versions.Version(\'{package}\', {major}, {minor}, {micro}{rc})')

        sed = (
            'sed -i "s/{current_version}/{new_version}/" '
            'mamba/scripts/{script}'.format(
                current_version=version_string,
                new_version=new_version_string.format(
                    package=version.package,
                    major=major,
                    minor=minor,
                    micro=micro,
                    rc=rc
                ),
                script=script
            )
        )

        if settings.pretend:
            print(sed)
        else:
            l = local(sed, capture=True)
            if l.failed:
                abort('Can\'t update {script} script version: {error}'.format(
                    script=script, error=l.stdout + ' ' + l.stderr
                ))

    @check_directory
    def update_mamba_version(self):
        """Update mamba version
        """

        current_version = self.git.get_current_mamba_version()
        version_template = Template(
            filepath.FilePath(
                '../../mamba/templates/version.tpl').open('r').read()
        )

        major = current_version.major
        minor = current_version.minor
        micro = current_version.micro
        rc = current_version.prerelease

        if settings.is_bugfix:
            micro += 1
        elif settings.is_minor:
            minor += 1
            micro = 0
        elif settings.is_major:
            major += 1
            minor = micro = 0

        if settings.is_release_candidate:
            if rc is None:
                rc = 1
            else:
                rc += 1

            rc = ', {rc}'.format(rc=rc)
        else:
            rc = ''

        args = {'major': major, 'minor': minor, 'micro': micro, 'rc': rc}

        if settings.pretend:
            print(version_template.safe_substitute(**args))
        else:
            with open('../../mamba/_version.py', 'w') as version_file:
                version_file.write(version_template.safe_substitute(**args))

    @check_directory
    def generate_sdist(self):
        """Generate source distribution package for PyPI Directory
        """

        local('python setup.py sdist --target-version=2.7 --format=bztar')

    @check_directory
    def upload_to_pypi(self):
        """Upload package to PyPI Directory Index
        """

        upload = (
            'python setup.py sdist --target-version=2.7 --format=bztar upload'
        )
        if settings.pretend:
            print upload
        else:
            local(upload)

    @check_directory
    def generate_version_relnotes(self, current_version):
        """
        Generate the new release notes using the index.rst template on
        docs directory
        """

        relnotes_template = Template(
            filepath.FilePath('../../docs/relnotes/index.rst').open('r').read()
        )

        mamba = imp.load_source('mamba', mamba_directory + 'mamba/_version.py')
        version = mamba.version.short()

        args = {
            'version': version,
            'release_date': datetime.datetime.today().strftime('%B %d, %Y'),
            'current_version': current_version
        }

        if settings.pretend:
            print relnotes_template.safe_substitute(**args)
        else:
            relnote_file = '../../docs/relnotes/{}.rst'.format(version)
            with open(relnote_file, 'w+') as f:
                f.write(relnotes_template.safe_substitute(**args))

        index_rst = (
            'Release Notes for Mamba ${version}\n'
            '==================================\n'
            '\n'
            '..\n'
            '   Any new feature or bugfix should be listed in this file, '
            'for trivial fixes\n    or features a bulleted list item is '
            'enough but for more sphisticated\n    additions a subsection '
            'for their own is required.\n'
            '\n'
            'Those are the release notes for Mamba ${version} released '
            'on ${release_date}.\n'
            '\n'
            'Features\n'
            '--------\n\n'
            'Bug Fixes\n'
            '---------\n\n'
            'Deprecations\n'
            '------------\n\n'
            'Removals\n'
            '--------\n\n'
            'Uncompatible Changes\n'
            '--------------------\n\n'
            'Details\n'
            '-------\n\n'
            'If you need a more detailed description of the changes made '
            'in this release you\ncan use git itself using::\n\n'
            '   git log ${current_version}..${version}\n'
        )

        if settings.pretend:
            print index_rst
        else:
            with open('../../docs/relnotes/index.rst', 'w+') as index:
                index.write(index_rst)


class Release(object):
    """A convenience class for the release/update process for Mamba
    """

    def __init__(self):
        self.steps = Steps()
        self.define()

    def define(self):
        """Define the full update-release process for mamba releases
        """

        git = Git()                                     # git object
        updater = Updater()                             # updater object
        current = git.get_current_mamba_version()       # current version

        self.steps.add(git.go_master_branch)            # checkout master
        self.steps.add(git.git_pull)                    # pull on master
        self.define_scripts(git, updater)               # release CLI scripts
        self.steps.add(updater.update_mamba_version)    # release mamba
        # generate release notes for this new release
        self.steps.add({
            'callable': updater.generate_version_relnotes,
            'arguments': current.short()
        })
        if bool(settings.no_distribute) is False:
            # self.steps.add(updater.generate_sdist)    # source distribution
            self.steps.add(updater.upload_to_pypi)      # upload to PyPI

        if bool(settings.only_distribute) is False:
            self.steps.add(git.commit_release)          # commit release
            self.steps.add(git.git_create_tag)          # tag the release
            self.steps.add(git.git_push)                # push to git repos

        # push should trigger GitHub hooks perform buildbot release build
        # and update main site donwloads and documentation and send the
        # emails with the content of relnotes
        # all this process have to be done in complete automatic way except
        # for the first invocation of updater script

    def define_scripts(self, git, updater):
        """Define release update for mamba-admin scripts
        """

        git_versions = git.git_compare_versions()
        for script, changes in git_versions.iteritems():
            if changes is False:                    # same version, no changes
                log.msg(
                    '{script} mamba-admin script should remain in its actual '
                    'version because no changes has been detected'.format(
                        script=script
                    )
                )
            else:
                log.msg(
                    '{script} mamba-admin script is going to be updated to '
                    'a new version, changes has been detected'.format(
                        script=script
                    )
                )
                # udpate script to next release version
                self.steps.add({
                    'callable': updater.update_script_version,
                    'arguments': script
                })

    def start(self):
        """Start the release proccess
        """

        self.steps.run()


# this task must be the only one task in the entire file
class Main(Task):
    """Main deployer entry point
    """
    name = 'main'

    def run(self):
        log.msg('Instancing updater object...')
        release = Release()
        log.msg('Starting update/release process...')
        release.start()
        log.msg('Update/Release done!')

instance = Main()
